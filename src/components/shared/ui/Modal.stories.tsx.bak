import type { Meta, StoryObj } from '@storybook/react';
import { fn } from '@storybook/test';
import { useState } from 'react';
import { Modal, ConfirmModal, ImageModal } from './Modal';
import { Button, PrimaryButton, SecondaryButton } from './Button';

const meta: Meta<typeof Modal> = {
  title: 'UI/Modal',
  component: Modal,
  parameters: {
    layout: 'fullscreen',
    docs: {
      description: {
        component: `
The Modal component provides a flexible dialog system with glassmorphism design, 
enhanced accessibility features, and smooth animations.

## Features
- Multiple sizes (xs, sm, md, lg, xl, full)
- Various types (default, confirmation, alert, form, image, drawer)
- Enhanced focus management with focus trap
- Keyboard navigation (ESC to close, Tab cycling)
- Customizable animations and positioning
- Accessibility compliant with ARIA standards
- Portal rendering for proper z-index management

## Accessibility
- Automatic focus trap within modal
- Focus restoration when modal closes
- ARIA attributes for screen readers
- Keyboard navigation support
- Proper semantic markup
        `,
      },
    },
  },
  tags: ['autodocs'],
  argTypes: {
    size: {
      control: 'select',
      options: ['xs', 'sm', 'md', 'lg', 'xl', 'full'],
    },
    variant: {
      control: 'select', 
      options: ['default', 'confirmation', 'alert', 'form', 'image', 'drawer'],
    },
  },
  args: { 
    onClose: fn(),
    onAfterOpen: fn(),
    onAfterClose: fn(),
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

// Modal Demo Component
const ModalDemo = ({ modalProps }: { modalProps: any }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="p-8">
      <Button 
        variant="primary" 
        onClick={() => setIsOpen(true)}
      >
        Open Modal
      </Button>
      
      <Modal
        {...modalProps}
        isOpen={isOpen}
        onClose={() => setIsOpen(false)}
      />
    </div>
  );
};

export const Basic: Story = {
  render: (args) => (
    <ModalDemo 
      modalProps={{
        ...args,
        title: 'Basic Modal',
        children: (
          <div>
            <p className="text-white/80 mb-4">
              This is a basic modal with a title and content. It demonstrates 
              the default styling and behavior.
            </p>
            <p className="text-white/60 text-sm">
              Click outside the modal or press ESC to close it.
            </p>
          </div>
        ),
        footer: (
          <div className="flex gap-3 justify-end">
            <SecondaryButton>Cancel</SecondaryButton>
            <PrimaryButton>Save</PrimaryButton>
          </div>
        ),
      }}
    />
  ),
};

const ConfirmationDemo = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="p-8">
      <Button 
        variant="danger" 
        onClick={() => setIsOpen(true)}
      >
        Delete Item
      </Button>
      
      <ConfirmModal
        isOpen={isOpen}
        onClose={() => setIsOpen(false)}
        title="Delete Confirmation"
        content="Are you sure you want to delete this item? This action cannot be undone."
        type="error"
        okText="Delete"
        cancelText="Cancel"
        onOk={async () => {
          // Simulate async operation
          await new Promise(resolve => setTimeout(resolve, 1000));
          console.log('Item deleted');
        }}
      />
    </div>
  );
};

export const Confirmation: Story = {
  render: () => <ConfirmationDemo />,
};

const FormModalDemo = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="p-8">
      <Button 
        variant="primary" 
        onClick={() => setIsOpen(true)}
      >
        Create New User
      </Button>
      
      <Modal
        isOpen={isOpen}
        onClose={() => setIsOpen(false)}
        title="Create New User"
        variant="form"
        size="md"
        footer={
          <div className="flex gap-3 justify-end">
            <SecondaryButton onClick={() => setIsOpen(false)}>
              Cancel
            </SecondaryButton>
            <PrimaryButton>Create User</PrimaryButton>
          </div>
        }
      >
        <form className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">
              Full Name
            </label>
            <input
              type="text"
              className="w-full px-4 py-2 glass-secondary border border-glass-border rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-primary/50"
              placeholder="Enter full name"
              autoFocus
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">
              Email Address
            </label>
            <input
              type="email"
              className="w-full px-4 py-2 glass-secondary border border-glass-border rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-primary/50"
              placeholder="Enter email address"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">
              Role
            </label>
            <select className="w-full px-4 py-2 glass-secondary border border-glass-border rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-primary/50">
              <option value="user">User</option>
              <option value="admin">Admin</option>
              <option value="moderator">Moderator</option>
            </select>
          </div>
        </form>
      </Modal>
    </div>
  );
};

export const FormModal: Story = {
  render: () => <FormModalDemo />,
};

const ImagePreviewDemo = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="p-8">
      <Button 
        variant="secondary" 
        onClick={() => setIsOpen(true)}
      >
        View Image
      </Button>
      
      <ImageModal
        isOpen={isOpen}
        onClose={() => setIsOpen(false)}
        src="https://picsum.photos/800/600"
        alt="Sample image for preview"
      />
    </div>
  );
};

export const ImagePreview: Story = {
  render: () => <ImagePreviewDemo />,
};

const AllSizesDemo = () => {
  const [openModal, setOpenModal] = useState<string | null>(null);
  const sizes = ['xs', 'sm', 'md', 'lg', 'xl'] as const;

  return (
    <div className="p-8">
      <div className="grid grid-cols-5 gap-4">
        {sizes.map((size) => (
          <Button 
            key={size}
            variant="secondary" 
            onClick={() => setOpenModal(size)}
            size="sm"
          >
            {size.toUpperCase()}
          </Button>
        ))}
      </div>
      
      {sizes.map((size) => (
        <Modal
          key={size}
          isOpen={openModal === size}
          onClose={() => setOpenModal(null)}
          size={size}
          title={`${size.toUpperCase()} Modal`}
          footer={
            <div className="layout-center gap-lg">
              <SecondaryButton onClick={() => setOpenModal(null)}>
                Close
              </SecondaryButton>
            </div>
          }
        >
          <p className="text-white/80">
            This is a {size} sized modal. Each size provides different 
            maximum widths to accommodate various content types.
          </p>
        </Modal>
      ))}
    </div>
  );
};

export const AllSizes: Story = {
  render: () => <AllSizesDemo />,
};

const AccessibilityDemoComponent = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="p-8">
      <div className="space-y-4">
        <p className="text-white/80">
          This modal demonstrates enhanced accessibility features:
        </p>
        <ul className="text-white/60 text-sm space-y-1 list-disc list-inside">
          <li>Focus trap keeps keyboard navigation within modal</li>
          <li>ESC key closes the modal</li>
          <li>Focus returns to trigger button when closed</li>
          <li>Proper ARIA attributes for screen readers</li>
          <li>Tab cycling between focusable elements</li>
        </ul>
      </div>
      
      <Button 
        variant="primary" 
        onClick={() => setIsOpen(true)}
        className="mt-4"
      >
        Test Accessibility
      </Button>
      
      <Modal
        isOpen={isOpen}
        onClose={() => setIsOpen(false)}
        title="Accessibility Test Modal"
        aria-describedby="modal-description"
        footer={
          <div className="flex gap-3">
            <Button variant="secondary" onClick={() => setIsOpen(false)}>
              Secondary Action
            </Button>
            <Button variant="primary">
              Primary Action
            </Button>
            <Button variant="danger">
              Danger Action
            </Button>
          </div>
        }
      >
        <div id="modal-description" className="space-y-4">
          <p className="text-white/80">
            Use Tab to navigate between the buttons below. Notice how focus 
            stays within the modal and cycles back to the first button after 
            the last one.
          </p>
          <div className="space-y-2">
            <input
              type="text"
              placeholder="First input"
              className="w-full px-3 py-2 glass-secondary border border-glass-border rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-primary/50"
            />
            <input
              type="text"
              placeholder="Second input"
              className="w-full px-3 py-2 glass-secondary border border-glass-border rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-primary/50"
            />
          </div>
        </div>
      </Modal>
    </div>
  );
};

export const AccessibilityDemo: Story = {
  render: () => <AccessibilityDemoComponent />,
};